# Author:ZJF
import sys
sys.setrecursionlimit(100000)
class Solution:
    def __init__(self):
        self.count = 0
        self.number_list = []
    def is_coincide(self, list1, list2):
        if "".join(list1).isdigit():
            return False
        else:
            for (m, n) in zip(list1, list2):  # 切出来的和印章匹配
                if m != n and m != "0":
                    return False
            else:
                return True
    def is_digit(self, a_list):     # 判断一个列表是否由纯数字组成
        the_str = "".join(a_list)
        return the_str.isdigit()


    def movesToStamp(self, stamp, target):

        m = len(stamp)
        n = len(target)
        if self.count > 10*n-1:
            return []
        else:
            self.count += 1
        stamp_list = list(stamp)
        target_list = list(target)
        while self.count < 10*n-1:
            for i in range(n-m+1):          #  去除印章
                the_list = target_list[i:i+m]
                if the_list == stamp_list:
                    if i not in self.number_list:
                        self.number_list.append(i)
                    for x in range(i, i+m):
                        target_list[x] = "0"
                    return self.movesToStamp(stamp_list, target_list)
            for i in range(n-m+1):           #  补全印章
                the_list = target_list[i:i + m]
                if self.is_coincide(the_list, stamp_list):
                    z = 0
                    for y in range(i, i+m):
                        target_list[y] = stamp_list[z]
                        z += 1
                    return self.movesToStamp(stamp_list, target_list)
            if self.is_digit(target_list):
                self.number_list.reverse()
                # print(self.number_list)
                # number_list1=self.number_list[:]
                # self.number_list.clear()
                return self.number_list
            else:
                return self.movesToStamp(stamp_list, target_list)


print(Solution().movesToStamp("dca", "ddcaddcaaa"))
print(Solution().movesToStamp("abc", "aabcc"))
print((Solution().movesToStamp("abc", "abc")))
print((Solution().movesToStamp("aeda","aaeaaeaedaaaedaedaaedadaaeaedaaaedaaedaaaaedaaaaedaeaedadaedadaadaedaaaedaaedadadaaedaedaeaedaaaedaaedaaedadaedaedaaeaeaedaaaedadadaaaedaedaaaaedaeaaedadaaaaedaaaedaaaaedaaedaaedaedaedadadaaaedadaaaaaaedaedaaaedaedaaaedadaedaadaaedaedaedaedaaedaaedadaedaedaedaeaedaaaedaeaaedaaaedadadaaaedaaaaedaaaaedaaaaedadaaeaedaaaedadadaedaadaaedaaedaedaaaaedaedaaaedaaedaaeaedaaaedaaaedaaaeaedaedaedaedaaedadaedaedaaedaeaedaaedaaeaedadaedaaaaaedaeaedaedaeaaedaaaedaedaaedaeaedaaedaaedaedaeaaedaedaaedadaedaaedaaaaedaeaedadaedadaedaaaaedaaedaedadaaeaeaaedaaedaeaedaaedadaedaedaedadaaaadaedaadaaaaedaaedadaaedaedaaedaedaaaedadaaaedaedadaeaeaedaedadaedaedaedaadadaaedaaedaeaedaedaadaedaedaaeaedaaedaaaedaedaaedadaedaaedadaedaeaaeaedaedaadaaedaedaaeaedadaedadaedaaedaaaaeaaedaedaaaedaedadaaaaaeaedaedaedaadaedaedaaedaedaedaeaedaedaeaedaaedaaaedaadaedaaaeaedaeaedadaedadaaeaeaedaaedaedaeaedadaaaedaeaaedaaaaedaedaaedaeaedaaedaadaedadaaaeaaedaedadaedaaaedaadaaaedaaedaaaedaaeaedaaedaedaaeaedaaedaeaedaedaaaedaaedaaeda")))
[984, 983, 978, 969, 966, 965, 956, 953, 948, 939, 938, 936, 931, 927, 925, 919, 921, 916, 915, 914, 909, 907, 900, 893, 886, 885, 881, 883, 874, 873, 869, 866, 855, 857, 852, 851, 846, 842, 837, 834, 833, 829, 827, 822, 815, 812, 807, 801, 794, 788, 786, 782, 777, 774, 773, 772, 771, 770, 768, 761, 760, 754, 756, 751, 750, 749, 741, 736, 732, 729, 728, 721, 719, 718, 710, 712, 713, 704, 695, 689, 682, 675, 672, 671, 665, 663, 662, 657, 646, 644, 642, 638, 632, 630, 623, 625, 620, 618, 611, 610, 604, 603, 596, 589, 579, 578, 577, 575, 571, 569, 568, 567, 566, 561, 555, 547, 535, 537, 539, 532, 531, 529, 518, 517, 513, 508, 504, 497, 496, 488, 482, 476, 478, 473, 460, 453, 446, 442, 444, 439, 434, 427, 426, 425, 421, 417, 414, 407, 400, 394, 388, 382, 377, 374, 373, 368, 363, 360, 357, 348, 347, 340, 339, 338, 327, 325, 321, 319, 313, 310, 307, 306, 300, 299, 294, 293, 288, 287, 282, 281, 279, 273, 269, 271, 262, 259, 253, 247, 237, 231, 224, 222, 218, 212, 211, 204, 203, 196, 195, 194, 193, 192, 186, 185, 183, 178, 163, 162, 157, 152, 151, 150, 145, 147, 138, 137, 136, 129, 128, 126, 120, 115, 117, 112, 111, 105, 91, 88, 85, 78, 76, 66, 62, 60, 59, 54, 50, 43, 42, 37, 36, 27, 24, 21, 20, 14, 7, 0, 1, 3, 4, 996, 992, 988, 980, 975, 971, 962, 958, 952, 947, 943, 935, 930, 922, 912, 906, 902, 897, 890, 884, 878, 871, 863, 859, 849, 844, 839, 832, 826, 821, 817, 809, 804, 798, 791, 785, 779, 765, 757, 748, 744, 739, 734, 725, 715, 707, 702, 698, 693, 686, 681, 677, 668, 659, 654, 650, 641, 635, 627, 615, 608, 600, 593, 587, 583, 574, 564, 558, 553, 549, 544, 540, 526, 522, 516, 511, 506, 501, 495, 491, 486, 479, 470, 466, 462, 457, 450, 445, 436, 431, 424, 419, 413, 409, 404, 397, 392, 385, 379, 372, 367, 362, 356, 352, 344, 335, 331, 324, 317, 312, 304, 298, 292, 286, 277, 272, 266, 261, 256, 250, 245, 241, 234, 228, 221, 216, 208, 200, 190, 181, 175, 171, 167, 161, 156, 148, 142, 133, 124, 119, 108, 103, 99, 95, 90, 82, 74, 70, 65, 57, 52, 47, 41, 35, 31, 26, 18, 11, 6]
[573,572,570,571,774,773,711,709,708,648,647,645,569,536,534,533,196,195,64,63,61,2,0,940,939,937,918,917,920,916,911,910,908,882,880,879,856,854,853,831,830,828,790,789,787,775,772,755,753,752,751,723,722,720,710,667,666,664,646,643,624,622,621,580,579,578,576,568,538,535,477,475,474,443,441,440,428,427,329,328,326,323,322,320,283,282,280,270,268,267,226,225,223,197,194,187,186,184,153,152,146,144,143,130,129,127,116,114,113,80,79,77,62,1,986,985,979,977,976,970,968,967,957,955,954,950,949,941,938,933,932,929,928,926,919,915,913,909,901,899,898,888,887,886,881,876,875,874,872,870,868,867,858,855,852,850,848,847,845,843,841,840,838,836,835,834,829,824,823,816,814,813,808,806,805,788,778,776,771,769,763,762,754,750,743,742,740,738,737,735,733,731,730,721,714,712,706,705,703,697,696,694,684,683,676,674,673,665,658,656,655,644,634,633,631,626,623,619,613,612,611,609,606,605,591,590,588,581,577,567,565,557,556,554,548,546,545,537,532,530,520,519,518,515,514,512,510,509,507,505,503,502,499,498,497,490,489,487,476,461,459,458,448,447,442,435,433,432,429,426,423,422,420,418,416,415,408,406,405,396,395,393,378,376,375,374,370,369,365,364,361,359,358,350,349,342,341,340,327,321,318,315,314,311,309,308,307,305,302,301,300,296,295,294,290,289,288,284,281,278,275,274,269,264,263,260,258,257,249,248,246,224,220,219,217,214,213,206,205,198,193,191,188,185,182,165,164,163,159,158,154,151,149,145,140,139,138,131,128,125,122,121,118,115,107,106,104,93,92,89,87,86,78,75,68,67,60,58,56,55,53,51,49,48,45,44,43,39,38,37,29,28,25,23,22,21,19,9,8,5,3,995,994,993,991,990,989,987,984,982,981,978,974,973,972,969,966,964,963,961,960,959,956,953,951,948,946,945,944,942,936,934,931,927,924,923,921,914,907,905,904,903,900,896,895,894,892,891,889,885,883,877,873,869,865,864,862,861,860,857,851,846,842,837,833,827,825,822,820,819,818,815,811,810,807,803,802,800,799,797,796,795,793,792,786,784,783,781,780,777,770,767,766,764,761,759,758,756,749,747,746,745,741,736,732,729,727,726,724,719,717,716,713,704,701,700,699,695,692,691,690,688,687,685,682,680,679,678,675,672,670,669,663,661,660,657,653,652,651,649,642,640,639,637,636,632,629,628,625,620,617,616,614,610,607,604,602,601,599,598,597,595,594,592,589,586,585,584,582,575,566,563,562,560,559,555,552,551,550,547,543,542,541,539,531,528,527,525,524,523,521,517,513,508,504,500,496,494,493,492,488,485,484,483,481,480,478,472,471,469,468,467,465,464,463,460,456,455,454,452,451,449,446,444,438,437,434,430,425,421,417,414,412,411,410,407,403,402,401,399,398,394,391,390,389,387,386,384,383,381,380,377,373,371,368,366,363,360,357,355,354,353,351,348,346,345,343,339,337,336,334,333,332,330,325,319,316,313,310,306,303,299,297,293,291,287,285,279,276,273,271,265,262,259,255,254,252,251,247,244,243,242,240,239,238,236,235,233,232,230,229,227,222,218,215,212,210,209,207,204,202,201,199,192,189,183,180,179,177,176,174,173,172,170,169,168,166,162,160,157,155,150,147,141,137,135,134,132,126,123,120,117,112,110,109,105,102,101,100,98,97,96,94,91,88,84,83,81,76,73,72,71,69,66,59,54,50,46,42,40,36,34,33,32,30,27,24,20,17,16,15,13,12,10,7,4,996,992,988,983,980,975,971,965,962,958,952,947,943,935,930,925,922,912,906,902,897,893,890,884,878,871,866,863,859,849,844,839,832,826,821,817,812,809,804,801,798,794,791,785,782,779,768,765,760,757,748,744,739,734,728,725,718,715,707,702,698,693,689,686,681,677,671,668,662,659,654,650,641,638,635,630,627,618,615,608,603,600,596,593,587,583,574,564,561,558,553,549,544,540,529,526,522,516,511,506,501,495,491,486,482,479,473,470,466,462,457,453,450,445,439,436,431,424,419,413,409,404,400,397,392,388,385,382,379,372,367,362,356,352,347,344,338,335,331,324,317,312,304,298,292,286,277,272,266,261,256,253,250,245,241,237,234,231,228,221,216,211,208,203,200,190,181,178,175,171,167,161,156,148,142,136,133,124,119,111,108,103,99,95,90,85,82,74,70,65,57,52,47,41,35,31,26,18,14,11,6]